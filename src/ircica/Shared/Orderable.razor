@using Microsoft.AspNetCore.WebUtilities
@using QueryParams

<th>
    <span class="btn-link" role="button" @onclick=SetOrderByAsync>@Display</span>
    @if (!string.IsNullOrWhiteSpace(Params.OrderBy) &&
    Params.OrderBy.Equals(Column, StringComparison.InvariantCultureIgnoreCase))
    {
        if (Params.OrderDesc)
        {
            <i class="ms-1 bi bi-sort-down"></i>
        }
        else
        {
            <i class="ms-1 bi bi-sort-up"></i>
        }
    }
</th>

@code {
    [Inject] private NavigationManager _navManager { get; set; } = null!;
    [Parameter] public string Column { get; set; } = null!;
    [Parameter] public string Display { get; set; } = null!;
    [Parameter] public Params Params { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    const string ORDER_BY = "order-by";
    const string ORDER_DIR = "descending";

    async Task NotifyAsync()
    {
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();

        var uri = new Uri(_navManager.Uri);
        var qs = QueryHelpers.ParseQuery(uri.Query);

        qs[ORDER_BY] = Column;
        if (Params.OrderDesc)
            qs[ORDER_DIR] = "y";
        else
            qs.Remove(ORDER_DIR);

        _navManager.NavigateTo(QueryHelpers.AddQueryString(uri.LocalPath, qs));
    }
    async Task SetOrderByAsync()
    {
        Params.SetOrderBy(Column);
        await NotifyAsync();
    }
}
@page "/"
@implements IDisposable

<PageTitle>Index</PageTitle>

<h1>Total usage @((GC.GetTotalMemory(false) /1024m/1024m).ToString("#,##0.00 MB"))</h1>

<table class="table">
    <thead>
        <tr>
            <th>Channel</th>
            <th>Connected</th>
            <th>Collecting</th>
            <th>Announcements</th>
            <th>Messages</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var indexer in IrcService.Connections)
        {
            <tr>
                <td>@indexer.Server.Name</td>
                <td>@indexer.Connected</td>
                <td>@indexer.Collecting</td>
                <td>@indexer.Lines.Count.ToString("#,##0")</td>
                <td>@indexer.Messages.Count.ToString("#,##0")</td>
            </tr>
        }
        <tr>
            <td>Count</td>
            <td>@IrcService.Connected</td>
            <td>@IrcService.Collecting</td>
            <td>@IrcService.Connections.Sum(i=>i.Lines.Count).ToString("#,##0")</td>
            <td>@IrcService.Connections.Sum(i=>i.Messages.Count).ToString("#,##0")</td>
        </tr>
    </tbody>
</table>

<button @onclick=StateHasChanged>Refresh</button>
<button @onclick=IrcService.DisconnectAll>Disconnect</button>
<button @onclick=IrcService.ConnectAll>Connect</button>
<button @onclick=IrcService.StopCollecting>Stop collecting</button>
<button @onclick=IrcService.StartCollecting>Start collecting</button>
<button @onclick=IrcService.CleanLogs>Clean</button>
<button @onclick=IrcService.BuildIndex>Build index</button>

@code {
    readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(2));
    protected override void OnInitialized()
    {
        RunTimer();
    }

    async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
            StateHasChanged();
    }

    public void Dispose()
    {
        _periodicTimer?.Dispose();
    }
}
